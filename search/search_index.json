{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Forecast Verifier","text":"<p>Forecast verifier is Python package for verifying specified causal relationships between forecasts/predictions and covariates given trained models. The package goes one step beyond simple model explainability tools to extract learnt causal relationships, and verify them against existing domain knowledge.</p>"},{"location":"#project-structure","title":"Project Structure","text":"<p>The package is structured as follows:  <pre><code>src/\n    \u2514\u2500\u2500 forecast_verifier/\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 verifier.py\n        \u251c\u2500\u2500 utils.py\n        \u251c\u2500\u2500 metrics.py\n        \u251c\u2500\u2500 graph.py\n        \u251c\u2500\u2500 dataset.py\n        \u251c\u2500\u2500 model.py\n</code></pre></p>"},{"location":"#contributions","title":"Contributions","text":"<p>Contributions are welcome! Please open an issue or submit a pull request on GitHub.</p>"},{"location":"usage/","title":"Quickstart","text":""},{"location":"usage/#installation","title":"Installation","text":"<p>Install the latest forecast-verifier version from PyPi using <code>pip</code>:</p> <p><code>pip install forecast-verifier</code></p> <p>Note: Different examples can be found via <code>notebooks/</code> folder.</p>"},{"location":"usage/#regression-example","title":"Regression example","text":"<pre><code>import pandas as pd\nfrom forecast_verifier.verifier import Verifier\nfrom forecast_verifier.model import Regressor\nfrom forecast_verifier.dataset import PerturbationDataset\nfrom forecast_verifier.graph import PerturbationDirection, EffectDirection\n\n# Create model class inheriting from Regressor that implements the predict method\nclass CustomRegressor(Regressor):\n    def __init__(self, model):\n        self.model = model\n\n    def predict(self, dataset):\n        \"\"\"\n        Generate predictions using given dataset.\n\n        Args:\n            dataset (pd.DataFrame): Input data for prediction.\n\n        Returns:\n            np.ndarray: Predicted values.\n        \"\"\"\n        return self.model.predict(dataset)\n\nmy_model = CustomRegressor(model)  # model is a pre-trained regression model\n\n# Load your dataset\noriginal_data = pd.read_csv('your_dataset.csv')\npertubation_data = pd.read_csv('your_pertubation_dataset.csv')\n\nverifier = Verifier(my_model, \n                    original_dataset, \n                    perturbation_dataset, \n                    ['variable1'], \n                    PerturbationDirection.decreasing, \n                    EffectDirection.positive)\nprint(verifier())\n</code></pre>"},{"location":"usage/#forecast-example","title":"Forecast example","text":"<pre><code>import pandas as pd\nfrom forecast_verifier.verifier import Verifier\nfrom forecast_verifier.model import Forecaster\nfrom forecast_verifier.dataset import PerturbationDataset\nfrom forecast_verifier.graph import PerturbationDirection, EffectDirection\nfrom forecast_verifier.utils import load_model\n\nclass CustomForecaster(Forecaster):\n\n    # exmple of loading a model from path\n    def __init__(self, model_path: str):        \n\n        self.model = load_model(model_path=model_path)\n\n    def forecast(self, dataset: pd.DataFrame) -&gt; np.ndarray:\n        \"\"\"\n        Generate forecasts using given dataset.\n\n        Args:\n            dataset (pd.DataFrame): Input data for forecasting.\n\n        Returns:\n            np.ndarray: Forecasted values.\n        \"\"\"\n\n        # Implement your forecasting logic here\n        pass\n\nmy_model = CustomForecaster(model_path='path_to_your_model')\n\n# Load your dataset\noriginal_data = pd.read_csv('your_dataset.csv')\npertubation_data = pd.read_csv('your_pertubation_dataset.csv')  \n\nverifier = Verifier(my_model, \n                    original_dataset, \n                    perturbation_dataset, \n                    ['variable1'], \n                    PerturbationDirection.decreasing, \n                    EffectDirection.positive)\nprint(verifier())\n</code></pre>"}]}